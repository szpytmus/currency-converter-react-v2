{"version":3,"sources":["App/Timer/styled.js","App/Timer/index.js","App/Timer/useCurrentDate.js","App/Result/index.js","App/Form/styled.js","App/Form/index.js","App/Form/useRatesData.js","App/App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Timer","date","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","month","weekday","day","year","hour","minute","second","formatDate","Result","result","undefined","sourceAmount","toFixed","fromCurrency","targetAmount","toCurrency","Loading","p","Failure","Form","setResult","ratesData","state","setRatesData","setTimeout","a","fetch","response","ok","Error","statusText","json","rates","useRatesData","setFromCurrency","setToCurrency","amount","setAmount","onSubmit","event","preventDefault","fromCurrencyRate","toCurrencyRate","calculateResult","value","onChange","target","name","Object","keys","map","currency","key","type","step","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.212e8566.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    text-align:center;\r\n    align-content: flex-end;\r\n    justify-content: flex-end;\r\n    font-size: 10px;\r\n    font-weight:bold;\r\n    font-family:monospace;\r\n`","import React from 'react';\r\nimport { useCurrentDate } from './useCurrentDate'\r\nimport { Wrapper } from './styled'\r\n\r\nconst formatDate = (date) => date.toLocaleString(\"en-GB\", {\r\n    month: \"long\",\r\n    weekday: \"long\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    second: \"numeric\"\r\n});\r\n\r\nexport const Timer = () => {\r\n    \r\n    const date = useCurrentDate();\r\n\r\n    return(\r\n        <Wrapper> Today is: {\"\"}{formatDate(date)}</Wrapper>\r\n    );\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport const useCurrentDate = () => {\r\n    \r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        };\r\n\r\n    }, []);\r\n\r\n    return date;\r\n};","import React from 'react';\r\n\r\nconst Result = ({ result }) => (\r\n    <div>\r\n    {result !== undefined && (\r\n        <>\r\n        {result.sourceAmount.toFixed(2)}&nbsp;{result.fromCurrency}&nbsp;={\"\"}\r\n        {result.targetAmount.toFixed(2)}&nbsp;{result.toCurrency}&nbsp;\r\n        </>\r\n    )}\r\n    </div>\r\n)\r\n\r\nexport default Result;","import styled from 'styled-components';\r\n\r\nexport const Loading = styled.p`\r\ncolor: teal;\r\n`\r\nexport const Failure = styled.p`\r\ncolor: crimson;\r\n`\r\n","import React, { useState } from 'react';\r\nimport Result from '../Result';\r\nimport { Loading, Failure } from './styled';\r\nimport { useRatesData } from './useRatesData';\r\n\r\nconst Form = () => {\r\n\r\n    const [result, setResult] = useState();\r\n    const ratesData = useRatesData();\r\n\r\n    const calculateResult = (fromCurrency, toCurrency, amount) => {\r\n\r\n        const fromCurrencyRate = ratesData.rates[fromCurrency];\r\n        const toCurrencyRate = ratesData.rates[toCurrency];\r\n\r\n        setResult({\r\n            sourceAmount: +amount,\r\n            fromCurrency,\r\n            targetAmount: (amount * fromCurrencyRate) / toCurrencyRate,\r\n            toCurrency,\r\n        });\r\n    };\r\n\r\n\r\n    const [fromCurrency, setFromCurrency] = useState(\"PLN\");\r\n    const [toCurrency, setToCurrency] = useState(\"PLN\");\r\n    const [amount, setAmount] = useState(\"\");\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult( fromCurrency, toCurrency, amount);\r\n    }\r\n\r\n  \r\n\r\n    return (\r\n        \r\n        <form onSubmit={onSubmit}>\r\n\r\n            <header>Currency Converter</header>\r\n            {ratesData.state === \"loading\"\r\n                ? (\r\n                    <Loading>\r\n                        Please wait... <br /> Currency rates are loading from European Central Bank. :)\r\n                    </Loading>\r\n                )\r\n                :(\r\n                    ratesData.state === \"error\" ? (\r\n                        <Failure>\r\n                            Hmm... Unfortunately something went wrong. Please check your internet connection.\r\n                        </Failure>\r\n                    ) : (\r\n                        <>\r\n                            <p>\r\n                                <label>Calculate from:\r\n                                <select\r\n                                        value={fromCurrency}\r\n                                        onChange={({ target }) => setFromCurrency(target.value)}\r\n                                        name=\"fromCurrency\"\r\n                                >\r\n                                        {!!ratesData.rates && Object.keys(ratesData.rates).map(((currency) => (\r\n                                            <option key={currency} value={currency}>\r\n                                                {currency}\r\n                                            </option>\r\n                                        )))}\r\n                                </select>\r\n                                </label>\r\n                            </p>\r\n                            <p>\r\n                                <label>Calculate to:\r\n                                <select\r\n                                        value={toCurrency}\r\n                                        onChange={({ target }) => setToCurrency(target.value)}\r\n                                        name=\"toCurrency\"\r\n                                >\r\n                                       {!!ratesData.rates && Object.keys(ratesData.rates).map(((currency) => (\r\n                                            <option key={currency} value={currency}>\r\n                                                {currency}\r\n                                            </option>\r\n                                        )))}\r\n                                </select>\r\n                                </label>\r\n                            </p>\r\n                            <p>\r\n                            <label>Write amount:\r\n                            <input\r\n                                        value={amount}\r\n                                        onChange={({ target }) => setAmount(target.value)}\r\n                                        name=\"value\"\r\n                                        type=\"number\"\r\n                                        step=\"0.01\"\r\n                                        placeholder=\"Write amount here\"\r\n                                        required\r\n                            />\r\n                            </label>\r\n                            </p>\r\n                            <p>\r\n                                <button>Convert!</button>\r\n                            </p>\r\n                            <Result result={result} />\r\n                        </>   \r\n                        )\r\n                )}\r\n                \r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nexport default Form;","import { useEffect, useState } from 'react';\r\n\r\nexport const useRatesData = () => {\r\n    const [ratesData, setRatesData] = useState({\r\n        state: \"loading\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchRates = async () => {\r\n            try {\r\n                const response = await fetch('https://api.exchangeratesapi.io/latest?base=PLN');\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const { rates, date } = await response.json();\r\n\r\n                setRatesData({\r\n                    state: \"success\",\r\n                    rates,\r\n                    date,\r\n                });\r\n\r\n            } catch {\r\n                setRatesData({\r\n                    state: \"error\",\r\n                });\r\n            }\r\n        };\r\n\r\n        setTimeout(fetchRates, 1000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n};","import React  from 'react';\nimport { Timer } from './Timer'\nimport Form  from './Form'\n\nfunction App() {\n\n  \n\n  return (\n    <div>\n      <Timer></Timer>\n      <Form>\n      </Form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}