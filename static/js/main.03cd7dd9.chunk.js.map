{"version":3,"sources":["currency-background.jpg","App/Container/styled.js","App/Container/index.js","App/Result/styled.js","App/Result/index.js","App/Form/styled.js","App/Timer/styled.js","App/Timer/index.js","App/Timer/useCurrentDate.js","App/Form/index.js","App/Form/useRatesData.js","App/Header/styled.js","App/Header/index.js","App/App.js","GlobalStyle.js","serviceWorker.js","index.js","theme.js"],"names":["module","exports","Wrapper","styled","main","Container","children","div","theme","color","forestGreen","Result","result","undefined","sourceAmount","toFixed","fromCurrency","targetAmount","toCurrency","Loading","p","Failure","crimson","StyledForm","form","gallery","breakpoint","mobileMax","Select","select","Label","label","Button","button","Input","input","Timer","date","useState","Date","setDate","useEffect","intervalId","setInterval","clearInterval","useCurrentDate","toLocaleString","month","weekday","day","year","hour","minute","second","formatDate","Form","setResult","ratesData","state","setRatesData","setTimeout","a","fetch","response","ok","Error","statusText","json","rates","useRatesData","setFromCurrency","setToCurrency","amount","setAmount","onSubmit","event","preventDefault","fromCurrencyRate","toCurrencyRate","calculateResult","value","onChange","target","name","Object","keys","map","currency","key","type","step","placeholder","required","StyledHeader","header","Header","title","Fragment","className","App","GlobalStyle","createGlobalStyle","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","black","emperor","boulder","silver","alto","white","teal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03cd7dd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currency-background.148b573e.jpg\";","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.main`\r\nmax-width: 600px;\r\n`","import React from 'react';\r\nimport { Wrapper } from './styled';\r\n\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: auto;\r\n    text-align: center;\r\n    font-size:24px;\r\n    font-weight:bold;\r\n    padding: 20px 0;\r\n    text-shadow: ${({ theme }) => theme.color.forestGreen} 1px 1px;\r\n`","import React from 'react';\r\nimport { Wrapper } from './styled'\r\n\r\nconst Result = ({ result }) => (\r\n    <Wrapper>\r\n    {result !== undefined && (\r\n        <>\r\n        {result.sourceAmount.toFixed(2)}&nbsp;{result.fromCurrency}&nbsp;=&nbsp;\r\n        {result.targetAmount.toFixed(2)}&nbsp;{result.toCurrency}&nbsp;\r\n        </>\r\n    )}\r\n    </Wrapper>\r\n)\r\n\r\nexport default Result;","import styled from 'styled-components';\r\n\r\nexport const Loading = styled.p`\r\ncolor: ${({ theme }) => theme.color.forestGreen};\r\n`\r\nexport const Failure = styled.p`\r\ncolor: ${({ theme }) => theme.color.crimson};\r\n`\r\nexport const StyledForm = styled.form`\r\n    background-color:${({ theme }) => theme.color.gallery};\r\n    margin: auto;\r\n    text-align: center;\r\n    max-width:1000px;\r\n    border: 2px solid ${({ theme }) => theme.color.forestGreen};\r\n    padding:20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        grid-template-columns: 1fr;\r\n        max-width:800px;\r\n    }\r\n`;\r\n\r\nexport const Select = styled.select`\r\n    padding: 5px;\r\n    color: ${({ theme }) => theme.color.forestGreen};\r\n    border: 2px solid rgb(49, 138, 49);\r\n    margin-left: 15px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-left:50px;\r\n        width: 80%;\r\n    }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n    font-size: 26px;\r\n    max-width: 180px;\r\n    margin-right: 20px;\r\n    text-shadow: ${({ theme }) => theme.color.forestGreen} 1px 1px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background:${({ theme }) => theme.color.forestGreen};\r\n    color:white;\r\n    border:none;\r\n    padding:10px;\r\n    margin: 20px 0 0 20px;\r\n    font-size: 16px;\r\n    transition: 1s;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-left: 35px;\r\n        width: 80%;\r\n    }\r\n\r\n    &:hover{\r\n    transform:scale(1.1);\r\n    filter: brightness(120%);\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 5px;\r\n    color: ${({ theme }) => theme.color.forestGreen};\r\n    border: 2px solid rgb(49, 138, 49);\r\n    margin-left: 15px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        margin-left: 50px;\r\n        width: 80%;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display:flex;\r\n    text-align:center;\r\n    align-content: flex-end;\r\n    justify-content: flex-end;\r\n    font-size: 12px;\r\n    font-weight:bold;\r\n    font-family:monospace;\r\n    margin-bottom: 60px;\r\n`","import React from 'react';\r\nimport { useCurrentDate } from './useCurrentDate'\r\nimport { Wrapper } from './styled'\r\n\r\nconst formatDate = (date) => date.toLocaleString(\"en-GB\", {\r\n    month: \"long\",\r\n    weekday: \"long\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    second: \"numeric\"\r\n});\r\n\r\nexport const Timer = () => {\r\n    \r\n    const date = useCurrentDate();\r\n\r\n    return(\r\n        <Wrapper> Today is: {\"\"}{formatDate(date)}</Wrapper>\r\n    );\r\n};","import { useState, useEffect } from 'react';\r\n\r\nexport const useCurrentDate = () => {\r\n    \r\n    const [date, setDate] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n\r\n        const intervalId = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(intervalId)\r\n        };\r\n\r\n    }, []);\r\n\r\n    return date;\r\n};","import React, { useState } from 'react';\r\nimport Result from '../Result';\r\nimport { StyledForm, Select, Button, Label, Input, Loading, Failure } from './styled';\r\nimport { useRatesData } from './useRatesData';\r\nimport { Timer } from '../Timer';\r\n\r\nconst Form = () => {\r\n\r\n    const [result, setResult] = useState();\r\n    const ratesData = useRatesData();\r\n\r\n    const calculateResult = (fromCurrency, toCurrency, amount) => {\r\n\r\n        const fromCurrencyRate = ratesData.rates[fromCurrency];\r\n        const toCurrencyRate = ratesData.rates[toCurrency];\r\n\r\n        setResult({\r\n            sourceAmount: +amount,\r\n            fromCurrency,\r\n            targetAmount: (amount * toCurrencyRate) / fromCurrencyRate ,\r\n            toCurrency,\r\n        });\r\n    };\r\n\r\n\r\n    const [fromCurrency, setFromCurrency] = useState(\"PLN\");\r\n    const [toCurrency, setToCurrency] = useState(\"PLN\");\r\n    const [amount, setAmount] = useState(\"\");\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        calculateResult( fromCurrency, toCurrency, amount);\r\n    }\r\n\r\n  \r\n\r\n    return (\r\n        \r\n        <StyledForm onSubmit={onSubmit}>\r\n\r\n            \r\n            {ratesData.state === \"loading\"\r\n                ? (\r\n                    <Loading>\r\n                        Please wait... <br /> Currency rates are loading from European Central Bank. :)\r\n                    </Loading>\r\n                )\r\n                :(\r\n                    ratesData.state === \"error\" ? (\r\n                        <Failure>\r\n                            Hmm... Unfortunately something went wrong. Please check your internet connection.\r\n                        </Failure>\r\n                    ) : (\r\n                        <>\r\n                            <p>\r\n                                <Timer></Timer>\r\n                                <Label>Calculate from:\r\n                                <Select\r\n                                        value={fromCurrency}\r\n                                        onChange={({ target }) => setFromCurrency(target.value)}\r\n                                        name=\"fromCurrency\"\r\n                                >\r\n                                        {!!ratesData.rates && Object.keys(ratesData.rates).map(((currency) => (\r\n                                            <option key={currency} value={currency}>\r\n                                                {currency}\r\n                                            </option>\r\n                                        )))}\r\n                                </Select>\r\n                                </Label>\r\n                            </p>\r\n                            <p>\r\n                                <Label>Calculate to:\r\n                                <Select\r\n                                        value={toCurrency}\r\n                                        onChange={({ target }) => setToCurrency(target.value)}\r\n                                        name=\"toCurrency\"\r\n                                >\r\n                                       {!!ratesData.rates && Object.keys(ratesData.rates).map(((currency) => (\r\n                                            <option key={currency} value={currency}>\r\n                                                {currency}\r\n                                            </option>\r\n                                        )))}\r\n                                </Select>\r\n                                </Label>\r\n                            </p>\r\n                            <p>\r\n                            <Label>Write amount:\r\n                            <Input\r\n                                        value={amount}\r\n                                        onChange={({ target }) => setAmount(target.value)}\r\n                                        name=\"value\"\r\n                                        type=\"number\"\r\n                                        step=\"0.01\"\r\n                                        placeholder=\"Write amount here\"\r\n                                        required\r\n                            />\r\n                            </Label>\r\n                            </p>\r\n                            <p>\r\n                                <Button>Convert!</Button>\r\n                            </p>\r\n                            <Result result={result} />\r\n                        </>   \r\n                        )\r\n                )}\r\n                \r\n        </StyledForm>\r\n\r\n    );\r\n};\r\n\r\nexport default Form;","import { useEffect, useState } from 'react';\r\n\r\nexport const useRatesData = () => {\r\n    const [ratesData, setRatesData] = useState({\r\n        state: \"loading\",\r\n    });\r\n\r\n    useEffect(() => {\r\n        const fetchRates = async () => {\r\n            try {\r\n                const response = await fetch('https://api.exchangeratesapi.io/latest?base=PLN');\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n\r\n                const { rates, date } = await response.json();\r\n\r\n                setRatesData({\r\n                    state: \"success\",\r\n                    rates,\r\n                    date,\r\n                });\r\n\r\n            } catch {\r\n                setRatesData({\r\n                    state: \"error\",\r\n                });\r\n            }\r\n        };\r\n\r\n        setTimeout(fetchRates, 1000);\r\n    }, []);\r\n\r\n    return ratesData;\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    padding: 20px;\r\n    font-family: 'Montserrat', sans-serif;\r\n    font-size: 40px;\r\n    color: ${({ theme }) => theme.color.forestGreen};\r\n    width: 100%;\r\n    text-shadow: black 2px 1px;\r\n    \r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        font-size: 30px;\r\n        margin-left: 40px;\r\n        width: 80%;\r\n    }\r\n`","import React from 'react';\r\nimport { StyledHeader } from './styled'\r\n\r\nconst Header = ({ title }) => (\r\n    <React.Fragment>\r\n        <StyledHeader>\r\n            <h1 className=\"header\">{title}</h1>\r\n        </StyledHeader>\r\n    </React.Fragment>\r\n);\r\n\r\nexport default Header;","import React  from 'react';\nimport Container from './Container';\nimport Form  from './Form';\nimport Header from './Header';\n\nfunction App() {\n\n  \n\n  return (\n    <Container>\n      \n      <Header title=\"Currency Calculator\"></Header>\n      <Form/>\n      \n    </Container>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from 'styled-components';\r\nimport background from './currency-background.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing:inherit;\r\n    }\r\n\r\n    #root { \r\n        font-family: 'Montserrat', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        min-height: 100vh;\r\n        background-image: url(\"${background}\");\r\n        background-size: cover;\r\n        background-position: cover;\r\n\r\n\r\n    }\r\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\nimport { GlobalStyle } from './GlobalStyle'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle/>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\nexport const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        emperor: \"#555\",\r\n        boulder: \"#777\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}